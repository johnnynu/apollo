================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2025-05-20T20:47:38.623Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
components.json
convex/_generated/api.d.ts
convex/_generated/api.js
convex/_generated/dataModel.d.ts
convex/_generated/server.d.ts
convex/_generated/server.js
convex/auth.config.ts
convex/comments.ts
convex/convex.config.ts
convex/counter.ts
convex/feed.ts
convex/http.ts
convex/image.ts
convex/post.ts
convex/README.md
convex/schema.ts
convex/subreddit.ts
convex/tsconfig.json
convex/users.ts
convex/vote.ts
eslint.config.js
index.html
package.json
postcss.config.js
public/apollo-transparent-logo.png
public/redditbanner2.jpg
public/reddithomebanner.png
public/vite.svg
README.md
src/App.tsx
src/assets/react.svg
src/components/Banner.tsx
src/components/Comment.tsx
src/components/CreateContentModal.tsx
src/components/Header.tsx
src/components/Layout.tsx
src/components/ModalSearchBar.tsx
src/components/mode-toggle.tsx
src/components/PostCard.tsx
src/components/PostFeed.tsx
src/components/SearchBar.tsx
src/components/Sidebar.tsx
src/components/theme-provider.tsx
src/components/ui/avatar.tsx
src/components/ui/button.tsx
src/components/ui/card.tsx
src/components/ui/dialog.tsx
src/components/ui/dropdown-menu.tsx
src/components/ui/input.tsx
src/components/ui/label.tsx
src/components/ui/select.tsx
src/components/ui/separator.tsx
src/components/ui/tabs.tsx
src/components/ui/textarea.tsx
src/index.css
src/lib/utils.ts
src/main.tsx
src/pages/HomePage.tsx
src/pages/PostPage.tsx
src/pages/ProfilePage.tsx
src/pages/SubredditPage.tsx
src/vite-env.d.ts
tailwind.config.ts
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

================
File: index.html
================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/public/apollo-transparent-logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Apollo</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "apollo",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@clerk/clerk-react": "^5.30.2",
    "@convex-dev/sharded-counter": "^0.1.7",
    "@radix-ui/react-avatar": "^1.1.7",
    "@radix-ui/react-dialog": "^1.1.12",
    "@radix-ui/react-dropdown-menu": "^2.1.12",
    "@radix-ui/react-label": "^2.1.5",
    "@radix-ui/react-select": "^2.2.3",
    "@radix-ui/react-separator": "^1.1.6",
    "@radix-ui/react-slot": "^1.2.0",
    "@radix-ui/react-tabs": "^1.1.9",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "convex": "^1.23.0",
    "lucide-react": "^0.503.0",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-router": "^7.5.3",
    "tailwind-merge": "^3.2.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@clerk/backend": "^1.30.1",
    "@eslint/js": "^9.22.0",
    "@types/node": "^22.15.3",
    "@types/react": "^19.0.10",
    "@types/react-dom": "^19.0.4",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.22.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.19",
    "globals": "^16.0.0",
    "postcss": "^8.5.3",
    "react-icons": "^5.5.0",
    "react-router-dom": "^7.5.3",
    "svix": "^1.64.1",
    "tailwindcss": "^3.4.17",
    "tw-animate-css": "^1.2.8",
    "typescript": "~5.7.2",
    "typescript-eslint": "^8.26.1",
    "vite": "^6.3.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config({
  extends: [
    // Remove ...tseslint.configs.recommended and replace with this
    ...tseslint.configs.recommendedTypeChecked,
    // Alternatively, use this for stricter rules
    ...tseslint.configs.strictTypeChecked,
    // Optionally, add this for stylistic rules
    ...tseslint.configs.stylisticTypeChecked,
  ],
  languageOptions: {
    // other options...
    parserOptions: {
      project: ['./tsconfig.node.json', './tsconfig.app.json'],
      tsconfigRootDir: import.meta.dirname,
    },
  },
})
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config({
  plugins: {
    // Add the react-x and react-dom plugins
    'react-x': reactX,
    'react-dom': reactDom,
  },
  rules: {
    // other rules...
    // Enable its recommended typescript rules
    ...reactX.configs['recommended-typescript'].rules,
    ...reactDom.configs.recommended.rules,
  },
})
```

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss"

const config = {
  important: true,
  darkMode: ["class"],
  content: [
    "./pages/**/*.{ts,tsx}",
    "./components/**/*.{ts,tsx}",
    "./app/**/*.{ts,tsx}",
    "./src/**/*.{ts,tsx}",
    "*.{js,ts,jsx,tsx,mdx}",
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "#7950F2", // Purple color
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config

================
File: tsconfig.app.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src", "tailwind.config.js"]
}

================
File: tsconfig.json
================
{
  "files": [],
  "references": [
    {
      "path": "./tsconfig.app.json"
    },
    {
      "path": "./tsconfig.node.json"
    }
  ],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: tsconfig.node.json
================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}

================
File: vite.config.ts
================
import path from "path"
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
})

================
File: convex/auth.config.ts
================
export default {
    providers: [
      {
        domain: "https://sweeping-joey-98.clerk.accounts.dev",
        applicationID: "convex",
      },
    ],
  };

================
File: convex/comments.ts
================
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { getCurrentUserOrThrow } from "./users";
import { counter, commentCountKey } from "./counter";

export const create = mutation({
  args: {
    content: v.string(),
    postId: v.id("post"),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUserOrThrow(ctx);

    const commentId = await ctx.db.insert("comments", {
      authorId: user._id,
      content: args.content,
      postId: args.postId,
    });

    await counter.inc(ctx, commentCountKey(args.postId));

    return commentId;
  },
});

export const get = query({
  args: { postId: v.id("post") },
  handler: async (ctx, args) => {
    const comments = await ctx.db
      .query("comments")
      .withIndex("byPost", (q) => q.eq("postId", args.postId))
      .collect();

    const authorIds = [...new Set(comments.map((comment) => comment.authorId))];
    const authors = await Promise.all(authorIds.map((id) => ctx.db.get(id)));
    const authorMap = new Map(
      authors.map((author) => [author!._id, author!.username])
    );

    return comments.map((comment) => ({
      ...comment,
      author: {
        username: authorMap.get(comment.authorId),
      },
    }));
  },
});

export const getCommentCount = query({
  args: { postId: v.id("post") },
  handler: async (ctx, args) => {
    return await counter.count(ctx, commentCountKey(args.postId));
  },
});

================
File: convex/convex.config.ts
================
// convex/convex.config.ts
import { defineApp } from "convex/server";
import shardedCounter from "@convex-dev/sharded-counter/convex.config";

const app = defineApp();
app.use(shardedCounter);

export default app;

================
File: convex/counter.ts
================
import { components } from "./_generated/api";
import { ShardedCounter } from "@convex-dev/sharded-counter";
import { Id } from "./_generated/dataModel";

export const counter = new ShardedCounter(components.shardedCounter, {
  defaultShards: 1,
});

export function commentCountKey(postId: Id<"post">) {
  return `comments:${postId}`;
}

export function postCountKey(userId: Id<"users">) {
  return `post:${userId}`;
}

export function subredditPostCountKey(subredditId: Id<"subreddit">) {
  return `subreddit:${subredditId}`;
}

================
File: convex/feed.ts
================
import { query } from "./_generated/server";
import { v } from "convex/values";
import { counter, subredditPostCountKey } from "./counter";
import { voteKey } from "./vote";

export const getTopPosts = query({
  args: { limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const limit = args.limit ?? 10;

    const now = new Date();
    const oneDayAgo = new Date(now.getTime() - 1000 * 60 * 60 * 24);
    const posts = await ctx.db
      .query("post")
      .withIndex("by_creation_time")
      .filter((q) => q.gt(q.field("_creationTime"), oneDayAgo.getTime()))
      .collect();

    const postWithScores = await Promise.all(
      posts.map(async (post) => {
        const upvotes = await counter.count(ctx, voteKey(post._id, "upvote"));
        const downvotes = await counter.count(
          ctx,
          voteKey(post._id, "downvote")
        );

        const author = await ctx.db.get(post.authorId);
        const subreddit = await ctx.db.get(post.subreddit);
        const image = post.image && (await ctx.storage.getUrl(post.image));

        return {
          ...post,
          score: upvotes - downvotes,
          upvotes,
          imageUrl: image ?? undefined,
          downvotes,
          author: { username: author?.username ?? "[deleted]" },
          subreddit: { name: subreddit?.name ?? "[deleted]" },
        };
      })
    );

    return postWithScores.sort((a, b) => b.score - a.score).slice(0, limit);
  },
});

export const topSubreddits = query({
  args: { limit: v.optional(v.number()) },
  handler: async (ctx, args) => {
    const subreddits = ctx.db.query("subreddit").collect();

    const topSubredditsByPosts = await Promise.all(
      (await subreddits).map(async (subreddit) => {
        const postCount = await counter.count(
          ctx,
          subredditPostCountKey(subreddit._id)
        );
        return {
          ...subreddit,
          postCount,
        };
      })
    );

    const sorted = topSubredditsByPosts.sort(
      (a, b) => (b.postCount ?? 0) - (a.postCount ?? 0)
    );

    return sorted.slice(0, args.limit ?? 5);
  },
});

================
File: convex/http.ts
================
import { httpRouter } from "convex/server";
import { httpAction } from "./_generated/server";
import { internal } from "./_generated/api";
import type { WebhookEvent } from "@clerk/backend";
import { Webhook } from "svix";

const http = httpRouter();

http.route({
  path: "/clerk-users-webhook",
  method: "POST",
  handler: httpAction(async (ctx, request) => {
    const event = await validateRequest(request);
    if (!event) {
      return new Response("Error occured", { status: 400 });
    }
    switch (event.type) {
      case "user.created": // intentional fallthrough
      case "user.updated":
        await ctx.runMutation(internal.users.upsertFromClerk, {
          data: event.data,
        });
        break;

      case "user.deleted": {
        const clerkUserId = event.data.id!;
        await ctx.runMutation(internal.users.deleteFromClerk, { clerkUserId });
        break;
      }
      default:
        console.log("Ignored Clerk webhook event", event.type);
    }

    return new Response(null, { status: 200 });
  }),
});

async function validateRequest(req: Request): Promise<WebhookEvent | null> {
  const payloadString = await req.text();
  const svixHeaders = {
    "svix-id": req.headers.get("svix-id")!,
    "svix-timestamp": req.headers.get("svix-timestamp")!,
    "svix-signature": req.headers.get("svix-signature")!,
  };
  const wh = new Webhook(process.env.CLERK_WEBHOOK_SECRET!);
  try {
    return wh.verify(payloadString, svixHeaders) as unknown as WebhookEvent;
  } catch (error) {
    console.error("Error verifying webhook event", error);
    return null;
  }
}

export default http;

================
File: convex/image.ts
================
import { mutation } from "./_generated/server";

export const generateUploadUrl = mutation(async (ctx) => {
  return await ctx.storage.generateUploadUrl();
});

================
File: convex/post.ts
================
import { mutation, query, QueryCtx } from "./_generated/server";
import { getCurrentUserOrThrow } from "./users";
import { v, ConvexError } from "convex/values";
import { Doc, Id } from "./_generated/dataModel";
import { counter, postCountKey, subredditPostCountKey } from "./counter";

type EnrichedPost = Omit<Doc<"post">, "subreddit"> & {
  author: { username: string } | undefined;
  subreddit:
    | {
        _id: Id<"subreddit">;
        name: string;
      }
    | undefined;
  imageUrl?: string;
};

const ERROR_MESSAGES = {
  POST_NOT_FOUND: "Post not found",
  SUBREDDIT_NOT_FOUND: "Subreddit not found",
  UNAUTHORIZED_DELETE: "You can't delete this post",
} as const;

// TODO: add validation for subreddit existing
export const create = mutation({
  args: {
    subject: v.string(),
    body: v.string(),
    subreddit: v.id("subreddit"),
    storageId: v.optional(v.id("_storage")),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUserOrThrow(ctx);

    const postId = await ctx.db.insert("post", {
      subject: args.subject,
      body: args.body,
      subreddit: args.subreddit,
      authorId: user._id,
      image: args.storageId || undefined,
    });

    await counter.inc(ctx, postCountKey(user._id));
    await counter.inc(ctx, subredditPostCountKey(args.subreddit));

    return postId;
  },
});

async function getEnrichedPost(
  ctx: QueryCtx,
  post: Doc<"post">
): Promise<EnrichedPost> {
  const [author, subreddit] = await Promise.all([
    ctx.db.get(post.authorId),
    ctx.db.get(post.subreddit),
  ]);

  const image = post.image && (await ctx.storage.getUrl(post.image));

  return {
    ...post,
    author: author ? { username: author.username } : undefined,
    subreddit: {
      _id: subreddit!._id,
      name: subreddit!.name,
    },
    imageUrl: image ?? undefined,
  };
}

export async function getEnrichedPosts(
  ctx: QueryCtx,
  posts: Doc<"post">[]
): Promise<EnrichedPost[]> {
  return Promise.all(posts.map((post) => getEnrichedPost(ctx, post)).sort());
}

export const getPost = query({
  args: { id: v.id("post") },
  handler: async (ctx, args) => {
    const post = await ctx.db.get(args.id);
    if (!post) return null;

    return getEnrichedPost(ctx, post);
  },
});

export const getUserPosts = query({
  args: { authorUsername: v.string() },
  handler: async (ctx, args): Promise<EnrichedPost[]> => {
    const user = await ctx.db
      .query("users")
      .filter((q) => q.eq(q.field("username"), args.authorUsername))
      .unique();

    if (!user) return [];

    const posts = await ctx.db
      .query("post")
      .withIndex("byAuthor", (q) => q.eq("authorId", user._id))
      .collect();

    return (await getEnrichedPosts(ctx, posts)).sort(
      (a, b) => (b._creationTime ?? 0) - (a._creationTime ?? 0)
    );
  },
});

export const deletePost = mutation({
  args: { postId: v.id("post") },
  handler: async (ctx, args) => {
    const post = await ctx.db.get(args.postId);
    if (!post)
      throw new ConvexError({ message: ERROR_MESSAGES.POST_NOT_FOUND });
    const user = await getCurrentUserOrThrow(ctx);

    if (post.authorId !== user._id)
      throw new ConvexError({ message: ERROR_MESSAGES.UNAUTHORIZED_DELETE });

    await ctx.db.delete(args.postId);
    await counter.dec(ctx, postCountKey(user._id));
    await counter.dec(ctx, subredditPostCountKey(post.subreddit));
  },
});

export const search = query({
  args: { queryStr: v.string(), subreddit: v.string() },
  handler: async (ctx, args) => {
    if (!args.queryStr) return [];

    const subredditObject = await ctx.db
      .query("subreddit")
      .filter((q) => q.eq(q.field("name"), args.subreddit))
      .unique();

    if (!subredditObject) return [];

    const posts = await ctx.db
      .query("post")
      .withSearchIndex("search_body", (q) =>
        q.search("subject", args.queryStr).eq("subreddit", subredditObject._id)
      )
      .take(10);

    return posts.map((post) => ({
      _id: post._id,
      title: post.subject,
      type: "post",
      name: subredditObject.name,
    }));
  },
});

================
File: convex/README.md
================
# Welcome to your Convex functions directory!

Write your Convex functions here.
See https://docs.convex.dev/functions for more.

A query function that takes two arguments looks like:

```ts
// functions.js
import { query } from "./_generated/server";
import { v } from "convex/values";

export const myQueryFunction = query({
  // Validators for arguments.
  args: {
    first: v.number(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Read the database as many times as you need here.
    // See https://docs.convex.dev/database/reading-data.
    const documents = await ctx.db.query("tablename").collect();

    // Arguments passed from the client are properties of the args object.
    console.log(args.first, args.second);

    // Write arbitrary JavaScript here: filter, aggregate, build derived data,
    // remove non-public properties, or create new objects.
    return documents;
  },
});
```

Using this query function in a React component looks like:

```ts
const data = useQuery(api.functions.myQueryFunction, {
  first: 10,
  second: "hello",
});
```

A mutation function looks like:

```ts
// functions.js
import { mutation } from "./_generated/server";
import { v } from "convex/values";

export const myMutationFunction = mutation({
  // Validators for arguments.
  args: {
    first: v.string(),
    second: v.string(),
  },

  // Function implementation.
  handler: async (ctx, args) => {
    // Insert or modify documents in the database here.
    // Mutations can also read from the database like queries.
    // See https://docs.convex.dev/database/writing-data.
    const message = { body: args.first, author: args.second };
    const id = await ctx.db.insert("messages", message);

    // Optionally, return a value from your mutation.
    return await ctx.db.get(id);
  },
});
```

Using this mutation function in a React component looks like:

```ts
const mutation = useMutation(api.functions.myMutationFunction);
function handleButtonPress() {
  // fire and forget, the most common way to use mutations
  mutation({ first: "Hello!", second: "me" });
  // OR
  // use the result once the mutation has completed
  mutation({ first: "Hello!", second: "me" }).then((result) =>
    console.log(result),
  );
}
```

Use the Convex CLI to push your functions to a deployment. See everything
the Convex CLI can do by running `npx convex -h` in your project root
directory. To learn more, launch the docs with `npx convex docs`.

================
File: convex/schema.ts
================
import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  users: defineTable({
    username: v.string(),
    externalId: v.string(),
  })
    .index("byExternalId", ["externalId"])
    .index("byUsername", ["username"]),

  subreddit: defineTable({
    name: v.string(),
    description: v.optional(v.string()),
    authorId: v.id("users"),
  }).searchIndex("search_body", { searchField: "name" }),

  post: defineTable({
    subject: v.string(),
    body: v.string(),
    subreddit: v.id("subreddit"),
    authorId: v.id("users"),
    image: v.optional(v.id("_storage")),
  })
    .searchIndex("search_body", {
      searchField: "subject",
      filterFields: ["subreddit"],
    })
    .index("bySubreddit", ["subreddit"])
    .index("byAuthor", ["authorId"]),

  comments: defineTable({
    authorId: v.id("users"),
    content: v.string(),
    postId: v.id("post"),
  }).index("byPost", ["postId"]),

  downvote: defineTable({
    postId: v.id("post"),
    userId: v.id("users"),
  })
    .index("byPost", ["postId"])
    .index("byUser", ["userId"]),

  upvote: defineTable({
    postId: v.id("post"),
    userId: v.id("users"),
  })
    .index("byPost", ["postId"])
    .index("byUser", ["userId"]),
});

================
File: convex/subreddit.ts
================
import { mutation, query } from "./_generated/server";
import { getCurrentUserOrThrow } from "./users";
import { v, ConvexError } from "convex/values";
import { getEnrichedPosts } from "./post";
import { counter, subredditPostCountKey } from "./counter";

export const create = mutation({
  args: {
    name: v.string(),
    description: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    const user = await getCurrentUserOrThrow(ctx);

    const subreddits = await ctx.db.query("subreddit").collect();
    if (subreddits.some((s) => s.name === args.name)) {
      throw new ConvexError({ message: "Subreddit already exists" });
    }
    await ctx.db.insert("subreddit", {
      name: args.name,
      description: args.description,
      authorId: user._id,
    });
  },
});

export const get = query({
  args: { name: v.string() },
  handler: async (ctx, args) => {
    const subreddit = await ctx.db
      .query("subreddit")
      .filter((q) => q.eq(q.field("name"), args.name))
      .unique();
    if (!subreddit) return null;

    const posts = await ctx.db
      .query("post")
      .withIndex("bySubreddit", (q) => q.eq("subreddit", subreddit._id))
      .collect();

    const enrichedPosts = (await getEnrichedPosts(ctx, posts)).sort(
      (a, b) => (b._creationTime ?? 0) - (a._creationTime ?? 0)
    );

    return { ...subreddit, posts: enrichedPosts };
  },
});

export const search = query({
  args: { queryStr: v.string() },
  handler: async (ctx, args) => {
    if (!args.queryStr) return [];

    const subreddits = await ctx.db
      .query("subreddit")
      .withSearchIndex("search_body", (q) => q.search("name", args.queryStr))
      .take(10);

    return subreddits.map((sub) => {
      return { ...sub, type: "community", title: sub.name };
    });
  },
});

================
File: convex/tsconfig.json
================
{
  /* This TypeScript project config describes the environment that
   * Convex functions run in and is used to typecheck them.
   * You can modify it, but some settings required to use Convex.
   */
  "compilerOptions": {
    /* These settings are not required by Convex and can be modified. */
    "allowJs": true,
    "strict": true,
    "moduleResolution": "Bundler",
    "jsx": "react-jsx",
    "skipLibCheck": true,
    "allowSyntheticDefaultImports": true,

    /* These compiler options are required by Convex */
    "target": "ESNext",
    "lib": ["ES2021", "dom"],
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "isolatedModules": true,
    "noEmit": true
  },
  "include": ["./**/*"],
  "exclude": ["./_generated"]
}

================
File: convex/users.ts
================
import { internalMutation, query, QueryCtx } from "./_generated/server";
import { UserJSON } from "@clerk/backend";
import { v, Validator } from "convex/values";
import { counter, postCountKey } from "./counter";

export const current = query({
  args: {},
  handler: async (ctx) => {
    return await getCurrentUser(ctx);
  },
});

export const upsertFromClerk = internalMutation({
  args: { data: v.any() as Validator<UserJSON> },
  async handler(ctx, { data }) {
    const userAttributes = {
      username: data.username || "",
      externalId: data.id,
    };

    const user = await userByExternalId(ctx, data.id);
    if (user === null) {
      await ctx.db.insert("users", userAttributes);
    } else {
      await ctx.db.patch(user._id, userAttributes);
    }
  },
});

export const deleteFromClerk = internalMutation({
  args: { clerkUserId: v.string() },
  async handler(ctx, { clerkUserId }) {
    const user = await userByExternalId(ctx, clerkUserId);

    if (user !== null) {
      await ctx.db.delete(user._id);
    } else {
      console.warn(
        `Can't delete user, there is none for Clerk user ID: ${clerkUserId}`
      );
    }
  },
});

export async function getCurrentUserOrThrow(ctx: QueryCtx) {
  const userRecord = await getCurrentUser(ctx);
  if (!userRecord) throw new Error("Can't get current user");
  return userRecord;
}

export async function getCurrentUser(ctx: QueryCtx) {
  const identity = await ctx.auth.getUserIdentity();
  if (identity === null) {
    return null;
  }
  return await userByExternalId(ctx, identity.subject);
}

async function userByExternalId(ctx: QueryCtx, externalId: string) {
  return await ctx.db
    .query("users")
    .withIndex("byExternalId", (q) => q.eq("externalId", externalId))
    .unique();
}

export const getPublicUser = query({
  args: { username: v.string() },
  handler: async (ctx, args) => {
    const user = await ctx.db
      .query("users")
      .withIndex("byUsername", (q) => q.eq("username", args.username))
      .unique();

    if (!user) return { posts: 0 };

    const postCount = await counter.count(ctx, postCountKey(user._id));

    return {
      posts: postCount,
      joinDate: user._creationTime,
    };
  },
});

================
File: convex/vote.ts
================
import { mutation, query } from "./_generated/server";
import { v } from "convex/values";
import { getCurrentUserOrThrow, getCurrentUser } from "./users";
import { counter } from "./counter";

type VoteType = "upvote" | "downvote";

export function voteKey(postId: string, voteType: VoteType): string {
  return `${voteType}:${postId}`;
}

export function createToggleVoteMutation(voteType: VoteType) {
  return mutation({
    args: {
      postId: v.id("post"),
    },
    handler: async (ctx, args) => {
      const user = await getCurrentUserOrThrow(ctx);
      const oppositeVoteType: VoteType =
        voteType === "upvote" ? "downvote" : "upvote";

      const existingVote = await ctx.db
        .query(voteType)
        .withIndex("byPost", (q) => q.eq("postId", args.postId))
        .filter((q) => q.eq(q.field("userId"), user._id))
        .unique();

      if (existingVote) {
        await ctx.db.delete(existingVote._id);
        await counter.dec(ctx, voteKey(args.postId, voteType));
        return;
      }

      const existingOppositeVote = await ctx.db
        .query(oppositeVoteType)
        .withIndex("byPost", (q) => q.eq("postId", args.postId))
        .filter((q) => q.eq(q.field("userId"), user._id))
        .unique();

      if (existingOppositeVote) {
        await ctx.db.delete(existingOppositeVote._id);
        await counter.dec(ctx, voteKey(args.postId, oppositeVoteType));
      }
      await ctx.db.insert(voteType, {
        postId: args.postId,
        userId: user._id,
      });
      await counter.inc(ctx, voteKey(args.postId, voteType));
    },
  });
}

export function createHasVotedQuery(voteType: VoteType) {
  return query({
    args: { postId: v.id("post") },
    handler: async (ctx, args) => {
      const user = await getCurrentUser(ctx);
      if (!user) return false;

      const vote = await ctx.db
        .query(voteType)
        .withIndex("byPost", (q) => q.eq("postId", args.postId))
        .filter((q) => q.eq(q.field("userId"), user._id))
        .unique();

      return !!vote;
    },
  });
}

export const toggleUpvote = createToggleVoteMutation("upvote");

export const toggleDownvote = createToggleVoteMutation("downvote");

export const hasUpvoted = createHasVotedQuery("upvote");

export const hasDownvoted = createHasVotedQuery("downvote");

export const getVoteCounts = query({
  args: { postId: v.id("post") },
  handler: async (ctx, args) => {
    const upvotes = await counter.count(ctx, voteKey(args.postId, "upvote"));
    const downvotes = await counter.count(
      ctx,
      voteKey(args.postId, "downvote")
    );

    return { upvotes, downvotes, total: upvotes - downvotes };
  },
});

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/App.tsx
================
import { ThemeProvider } from "@/components/theme-provider";
import HomePage from "./pages/HomePage";
import PostPage from "./pages/PostPage";
import ProfilePage from "./pages/ProfilePage";
import SubredditPage from "./pages/SubredditPage";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import Layout from "./components/Layout";

function App() {
  return (
    <ThemeProvider defaultTheme="dark" storageKey="vite-ui-theme">
      <BrowserRouter>
        <Routes>
          <Route path="/" element={<Layout />}>
            <Route index element={<HomePage />} />
            <Route path="r/:subredditName" element={<SubredditPage />} />
            <Route path="post/:postId" element={<PostPage />} />
            <Route path="u/:username" element={<ProfilePage />} />
            <Route path="*" element={<Navigate to="/" replace />} />
          </Route>
        </Routes>
      </BrowserRouter>
    </ThemeProvider>
  );
}

export default App;

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    --sidebar-background: 0 0% 98%;
    --sidebar-foreground: 240 5.3% 26.1%;
    --sidebar-primary: 240 5.9% 10%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 240 4.8% 95.9%;
    --sidebar-accent-foreground: 240 5.9% 10%;
    --sidebar-border: 220 13% 91%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
    --sidebar-background: 240 5.9% 10%;
    --sidebar-foreground: 240 4.8% 95.9%;
    --sidebar-primary: 224.3 76.3% 48%;
    --sidebar-primary-foreground: 0 0% 100%;
    --sidebar-accent: 240 3.7% 15.9%;
    --sidebar-accent-foreground: 240 4.8% 95.9%;
    --sidebar-border: 240 3.7% 15.9%;
    --sidebar-ring: 217.2 91.2% 59.8%;
  }
}

@layer base {
  * {
    /* Remove the border-border class entirely */
    border-color: hsl(var(--border));
  }
  body {
    /* Instead of bg-background */
    background-color: hsl(var(--background));
    color: hsl(var(--foreground));
  }
}

================
File: src/main.tsx
================
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import { ClerkProvider, useAuth } from "@clerk/clerk-react";
import { ConvexProviderWithClerk } from "convex/react-clerk";
import { ConvexReactClient } from "convex/react";
import "./index.css";

const convex = new ConvexReactClient(import.meta.env.VITE_CONVEX_URL as string);

createRoot(document.getElementById("root")!).render(
  <StrictMode>
    <ClerkProvider publishableKey={import.meta.env.VITE_PK}>
      <ConvexProviderWithClerk client={convex} useAuth={useAuth}>
        <App />
      </ConvexProviderWithClerk>
    </ClerkProvider>
  </StrictMode>
);

================
File: src/vite-env.d.ts
================
/// <reference types="vite/client" />

================
File: convex/_generated/api.d.ts
================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type * as comments from "../comments.js";
import type * as counter from "../counter.js";
import type * as feed from "../feed.js";
import type * as http from "../http.js";
import type * as image from "../image.js";
import type * as post from "../post.js";
import type * as subreddit from "../subreddit.js";
import type * as users from "../users.js";
import type * as vote from "../vote.js";

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  comments: typeof comments;
  counter: typeof counter;
  feed: typeof feed;
  http: typeof http;
  image: typeof image;
  post: typeof post;
  subreddit: typeof subreddit;
  users: typeof users;
  vote: typeof vote;
}>;
declare const fullApiWithMounts: typeof fullApi;

export declare const api: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "internal">
>;

export declare const components: {
  shardedCounter: {
    public: {
      add: FunctionReference<
        "mutation",
        "internal",
        { count: number; name: string; shard?: number; shards?: number },
        number
      >;
      count: FunctionReference<"query", "internal", { name: string }, number>;
      estimateCount: FunctionReference<
        "query",
        "internal",
        { name: string; readFromShards?: number; shards?: number },
        any
      >;
      rebalance: FunctionReference<
        "mutation",
        "internal",
        { name: string; shards?: number },
        any
      >;
      reset: FunctionReference<"mutation", "internal", { name: string }, any>;
    };
  };
};

================
File: convex/_generated/api.js
================
/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import { anyApi, componentsGeneric } from "convex/server";

/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
export const api = anyApi;
export const internal = anyApi;
export const components = componentsGeneric();

================
File: convex/_generated/dataModel.d.ts
================
/* eslint-disable */
/**
 * Generated data model types.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type {
  DataModelFromSchemaDefinition,
  DocumentByName,
  TableNamesInDataModel,
  SystemTableNames,
} from "convex/server";
import type { GenericId } from "convex/values";
import schema from "../schema.js";

/**
 * The names of all of your Convex tables.
 */
export type TableNames = TableNamesInDataModel<DataModel>;

/**
 * The type of a document stored in Convex.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Doc<TableName extends TableNames> = DocumentByName<
  DataModel,
  TableName
>;

/**
 * An identifier for a document in Convex.
 *
 * Convex documents are uniquely identified by their `Id`, which is accessible
 * on the `_id` field. To learn more, see [Document IDs](https://docs.convex.dev/using/document-ids).
 *
 * Documents can be loaded using `db.get(id)` in query and mutation functions.
 *
 * IDs are just strings at runtime, but this type can be used to distinguish them from other
 * strings when type checking.
 *
 * @typeParam TableName - A string literal type of the table name (like "users").
 */
export type Id<TableName extends TableNames | SystemTableNames> =
  GenericId<TableName>;

/**
 * A type describing your Convex data model.
 *
 * This type includes information about what tables you have, the type of
 * documents stored in those tables, and the indexes defined on them.
 *
 * This type is used to parameterize methods like `queryGeneric` and
 * `mutationGeneric` to make them type-safe.
 */
export type DataModel = DataModelFromSchemaDefinition<typeof schema>;

================
File: convex/_generated/server.d.ts
================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  ActionBuilder,
  AnyComponents,
  HttpActionBuilder,
  MutationBuilder,
  QueryBuilder,
  GenericActionCtx,
  GenericMutationCtx,
  GenericQueryCtx,
  GenericDatabaseReader,
  GenericDatabaseWriter,
  FunctionReference,
} from "convex/server";
import type { DataModel } from "./dataModel.js";

type GenericCtx =
  | GenericActionCtx<DataModel>
  | GenericMutationCtx<DataModel>
  | GenericQueryCtx<DataModel>;

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const query: QueryBuilder<DataModel, "public">;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export declare const internalQuery: QueryBuilder<DataModel, "internal">;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const mutation: MutationBuilder<DataModel, "public">;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export declare const internalMutation: MutationBuilder<DataModel, "internal">;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export declare const action: ActionBuilder<DataModel, "public">;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export declare const internalAction: ActionBuilder<DataModel, "internal">;

/**
 * Define an HTTP action.
 *
 * This function will be used to respond to HTTP requests received by a Convex
 * deployment if the requests matches the path and method where this action
 * is routed. Be sure to route your action in `convex/http.js`.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Import this function from `convex/http.js` and route it to hook it up.
 */
export declare const httpAction: HttpActionBuilder;

/**
 * A set of services for use within Convex query functions.
 *
 * The query context is passed as the first argument to any Convex query
 * function run on the server.
 *
 * This differs from the {@link MutationCtx} because all of the services are
 * read-only.
 */
export type QueryCtx = GenericQueryCtx<DataModel>;

/**
 * A set of services for use within Convex mutation functions.
 *
 * The mutation context is passed as the first argument to any Convex mutation
 * function run on the server.
 */
export type MutationCtx = GenericMutationCtx<DataModel>;

/**
 * A set of services for use within Convex action functions.
 *
 * The action context is passed as the first argument to any Convex action
 * function run on the server.
 */
export type ActionCtx = GenericActionCtx<DataModel>;

/**
 * An interface to read from the database within Convex query functions.
 *
 * The two entry points are {@link DatabaseReader.get}, which fetches a single
 * document by its {@link Id}, or {@link DatabaseReader.query}, which starts
 * building a query.
 */
export type DatabaseReader = GenericDatabaseReader<DataModel>;

/**
 * An interface to read from and write to the database within Convex mutation
 * functions.
 *
 * Convex guarantees that all writes within a single mutation are
 * executed atomically, so you never have to worry about partial writes leaving
 * your data in an inconsistent state. See [the Convex Guide](https://docs.convex.dev/understanding/convex-fundamentals/functions#atomicity-and-optimistic-concurrency-control)
 * for the guarantees Convex provides your functions.
 */
export type DatabaseWriter = GenericDatabaseWriter<DataModel>;

================
File: convex/_generated/server.js
================
/* eslint-disable */
/**
 * Generated utilities for implementing server-side Convex query and mutation functions.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * To regenerate, run `npx convex dev`.
 * @module
 */

import {
  actionGeneric,
  httpActionGeneric,
  queryGeneric,
  mutationGeneric,
  internalActionGeneric,
  internalMutationGeneric,
  internalQueryGeneric,
  componentsGeneric,
} from "convex/server";

/**
 * Define a query in this Convex app's public API.
 *
 * This function will be allowed to read your Convex database and will be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const query = queryGeneric;

/**
 * Define a query that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to read from your Convex database. It will not be accessible from the client.
 *
 * @param func - The query function. It receives a {@link QueryCtx} as its first argument.
 * @returns The wrapped query. Include this as an `export` to name it and make it accessible.
 */
export const internalQuery = internalQueryGeneric;

/**
 * Define a mutation in this Convex app's public API.
 *
 * This function will be allowed to modify your Convex database and will be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const mutation = mutationGeneric;

/**
 * Define a mutation that is only accessible from other Convex functions (but not from the client).
 *
 * This function will be allowed to modify your Convex database. It will not be accessible from the client.
 *
 * @param func - The mutation function. It receives a {@link MutationCtx} as its first argument.
 * @returns The wrapped mutation. Include this as an `export` to name it and make it accessible.
 */
export const internalMutation = internalMutationGeneric;

/**
 * Define an action in this Convex app's public API.
 *
 * An action is a function which can execute any JavaScript code, including non-deterministic
 * code and code with side-effects, like calling third-party services.
 * They can be run in Convex's JavaScript environment or in Node.js using the "use node" directive.
 * They can interact with the database indirectly by calling queries and mutations using the {@link ActionCtx}.
 *
 * @param func - The action. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped action. Include this as an `export` to name it and make it accessible.
 */
export const action = actionGeneric;

/**
 * Define an action that is only accessible from other Convex functions (but not from the client).
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument.
 * @returns The wrapped function. Include this as an `export` to name it and make it accessible.
 */
export const internalAction = internalActionGeneric;

/**
 * Define a Convex HTTP action.
 *
 * @param func - The function. It receives an {@link ActionCtx} as its first argument, and a `Request` object
 * as its second.
 * @returns The wrapped endpoint function. Route a URL path to this function in `convex/http.js`.
 */
export const httpAction = httpActionGeneric;

================
File: src/components/Banner.tsx
================
import { Card } from "@/components/ui/card";
import { X } from "lucide-react";
import { useState } from "react";

export function Banner() {
  const [isVisible, setIsVisible] = useState(true);

  if (!isVisible) return null;

  return (
    <Card className="relative overflow-hidden mb-4 dark:bg-[#1a1a1a] dark:border-[#343536]">
      <button
        onClick={() => setIsVisible(false)}
        className="absolute top-2 right-2 bg-black/30 hover:bg-black/50 text-white rounded-full p-1 z-10"
        aria-label="Close banner"
      >
        <X className="h-4 w-4" />
      </button>
      <div className="relative w-full h-[120px] sm:h-[150px] md:h-[180px]">
        <img
          src="/public/redditbanner2.jpg"
          alt="Apollo space theme banner"
          className="object-cover w-full h-full"
        />
        <div className="absolute bottom-4 left-4 flex items-center gap-3">
          <div className="relative w-12 h-12">
            <img
              src="/public/apollo-transparent-logo.png"
              alt="Apollo mascot"
              width={48}
              height={48}
              className="object-contain"
            />
          </div>
          <div className="text-white text-shadow">
            <h2 className="text-xl font-bold">Welcome to Apollo</h2>
            <p className="text-sm">Your space-themed community</p>
          </div>
        </div>
      </div>
    </Card>
  );
}

================
File: src/components/Comment.tsx
================
import type { Id } from "../../convex/_generated/dataModel";
import { Link } from "react-router";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { ArrowBigDown, ArrowBigUp, Reply } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useState } from "react";

interface CommentProps {
  comment: {
    _id: Id<"comments">;
    content: string;
    author?: {
      username?: string;
    };
    _creationTime: number;
  };
}

const Comment = ({ comment }: CommentProps) => {
  const [votes, setVotes] = useState(0);
  const [userVote, setUserVote] = useState<"up" | "down" | null>(null);

  const handleVote = (direction: "up" | "down") => {
    if (userVote === direction) {
      setVotes(direction === "up" ? votes - 1 : votes + 1);
      setUserVote(null);
    } else {
      if (userVote === null) {
        setVotes(direction === "up" ? votes + 1 : votes - 1);
      } else {
        setVotes(direction === "up" ? votes + 2 : votes - 2);
      }
      setUserVote(direction);
    }
  };

  return (
    <div className="flex gap-2 mb-4">
      <div className="flex-shrink-0">
        <Avatar className="h-6 w-6">
          <AvatarImage src="/placeholder.svg?height=50&width=50" />
          <AvatarFallback>
            {comment.author?.username
              ? comment.author.username.substring(0, 1).toUpperCase()
              : "?"}
          </AvatarFallback>
        </Avatar>
      </div>
      <div className="flex-1">
        <div className="flex items-center text-xs gap-1.5 text-muted-foreground">
          {comment.author?.username ? (
            <Link
              to={`u/${comment.author.username}`}
              className="font-medium hover:underline"
            >
              u/{comment.author.username}
            </Link>
          ) : (
            <span className="font-medium">u/deleted</span>
          )}
          <span>•</span>
          <span>{new Date(comment._creationTime).toLocaleString()}</span>
        </div>
        <div className="mt-1 text-sm">{comment.content}</div>
        <div className="flex items-center gap-1 mt-1">
          <Button
            variant="ghost"
            size="icon"
            className={`h-6 w-6 rounded-full ${userVote === "up" ? "text-[#7950F2]" : "text-muted-foreground"}`}
            onClick={() => handleVote("up")}
          >
            <ArrowBigUp className="h-3 w-3" />
            <span className="sr-only">Upvote</span>
          </Button>
          <span
            className={`text-xs font-medium ${
              userVote === "up"
                ? "text-[#7950F2]"
                : userVote === "down"
                  ? "text-red-500"
                  : "text-muted-foreground"
            }`}
          >
            {votes}
          </span>
          <Button
            variant="ghost"
            size="icon"
            className={`h-6 w-6 rounded-full ${userVote === "down" ? "text-red-500" : "text-muted-foreground"}`}
            onClick={() => handleVote("down")}
          >
            <ArrowBigDown className="h-3 w-3" />
            <span className="sr-only">Downvote</span>
          </Button>
          <Button
            variant="ghost"
            size="sm"
            className="h-6 text-xs gap-1 text-muted-foreground"
          >
            <Reply className="h-3 w-3" />
            <span>Reply</span>
          </Button>
        </div>
      </div>
    </div>
  );
};

export default Comment;

================
File: src/components/CreateContentModal.tsx
================
import React, { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import ModalSearchBar from "./ModalSearchBar";
import { Image, Link, FileText, MessageSquare, ImageIcon } from "lucide-react";
import { useMutation, useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import { useLocation, useNavigate, useParams } from "react-router";

type CreateContentModalProps = {
  defaultOpen?: boolean;
  onOpenChange?: (open: boolean) => void;
};

export function CreateContentModal({
  defaultOpen = false,
  onOpenChange,
}: CreateContentModalProps) {
  const [open, setOpen] = useState(defaultOpen);
  const [postType, setPostType] = useState<"text" | "image" | "link">("text");
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const location = useLocation();
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    community: "",
    title: "",
    content: "", // text posts
    imageFile: null as File | null, // for image posts
    imagePreview: null as string | null,
    communityName: "", // for com creation
    communityDescription: "", // for com creation
  });

  const createSubreddit = useMutation(api.subreddit.create);
  const createPost = useMutation(api.post.create);
  const generateUploadUrl = useMutation(api.image.generateUploadUrl);

  const handleImageSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      processSelectedFile(file);
    }
  };

  const processSelectedFile = (file: File) => {
    updateFormData("imageFile", file);
    const reader = new FileReader();
    reader.onloadend = () => {
      updateFormData("imagePreview", reader.result as string);
    };
    reader.readAsDataURL(file);
  };

  const handleRemoveImage = () => {
    updateFormData("imageFile", null);
    updateFormData("imagePreview", null);
  };

  const handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.currentTarget.classList.add("border-primary");
  };
  const handleDragLeave = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.currentTarget.classList.remove("border-primary");
  };
  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.currentTarget.classList.remove("border-primary");

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const file = e.dataTransfer.files[0];
      if (file.type.startsWith("image/")) {
        processSelectedFile(file);
      }
    }
  };
  const handleFileInputClick = () => {
    document.getElementById("file-upload")?.click();
  };

  const { subredditName } = useParams();
  const subreddit = useQuery(api.subreddit.get, {
    name: subredditName || formData.community || "",
  });

  const updateFormData = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }));
  };

  const handleOpenChange = (newOpen: boolean) => {
    setOpen(newOpen);
    onOpenChange?.(newOpen);
  };

  const handleClose = () => {
    setOpen(false);
    onOpenChange?.(false);
  };

  const handlePostSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const { title, content, imageFile } = formData;

    if (!title.trim() || !subreddit || !formData.community) {
      alert("Please enter a title and select a subreddit.");
      return;
    }

    try {
      if (subreddit) {
        setIsLoading(true);

        let imageUrl = undefined;

        if (imageFile) {
          const uploadUrl = await generateUploadUrl();
          const res = await fetch(uploadUrl, {
            method: "POST",
            headers: { "Content-Type": imageFile.type },
            body: imageFile,
          });

          if (!res.ok) throw new Error("Failed to upload image!");

          const { storageId } = await res.json();
          imageUrl = storageId;
        }

        await createPost({
          subject: title.trim(),
          body: content.trim(),
          subreddit: subreddit._id,
          storageId: imageUrl,
        });

        handleClose();
        navigate(`/r/${subredditName ?? formData.community}`);
      }
    } catch (err) {
      console.log(err);
      alert("Failed to create post. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleCommunitySubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const { communityName, communityDescription } = formData;

    if (!communityName) {
      setError("Name is required");
    }

    if (!/^[a-zA-Z0-9_]+$/.test(communityName)) {
      setError(
        "Community name can only contain letters, numbers, and underscores."
      );
    }

    if (communityName.length < 3 || communityName.length > 21) {
      setError("Community name must be between 3 and 21 characters.");
    }

    try {
      setIsLoading(true);

      await createSubreddit({
        name: communityName,
        description: communityDescription,
      });

      handleClose();
      navigate(`r/${communityName}`);
    } catch (err: any) {
      setError(`Failed to create community. ${err.data.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (!open) {
      setFormData({
        community: "",
        title: "",
        content: "",
        imageFile: null as File | null,
        imagePreview: null as string | null,
        communityName: "",
        communityDescription: "",
      });
      setError("");
    }
  }, [open]);

  useEffect(() => {
    if (open) {
      const path = location.pathname;

      const subredditMatch = path.match(/\/r\/([^\/]+)/);

      if (subredditMatch && subredditMatch[1]) {
        updateFormData("community", subredditMatch[1]);
      }
    }
  }, [open, location.pathname]);

  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[600px] dark:bg-[#1a1a1a] dark:border-[#343536]">
        <Tabs defaultValue="post" className="w-full">
          <TabsList className="grid w-full grid-cols-2 dark:bg-[#272729]">
            <TabsTrigger
              value="post"
              className="dark:data-[state=active]:bg-[#343536]"
              disabled={isLoading}
            >
              Create Post
            </TabsTrigger>
            <TabsTrigger
              value="community"
              className="dark:data-[state=active]:bg-[#343536]"
              disabled={isLoading}
            >
              Create Community
            </TabsTrigger>
          </TabsList>

          {/* Create Post Tab */}
          <TabsContent value="post" className="space-y-4 mt-4">
            <DialogHeader>
              {error && (
                <div className="p-3 rounded-md bg-red-500/10 border border-red-500 text-red-500">
                  <p className="text-sm font-medium">{error}</p>
                </div>
              )}
              <DialogTitle>Create a Post</DialogTitle>
              <DialogDescription>
                Share your thoughts, images, or links with the community.
              </DialogDescription>
            </DialogHeader>

            <div className="flex gap-2 mb-4">
              <Button
                variant={postType === "text" ? "default" : "outline"}
                size="sm"
                onClick={() => setPostType("text")}
                className="flex gap-2"
                disabled={isLoading}
              >
                <FileText className="h-4 w-4" />
                Text
              </Button>
              <Button
                variant={postType === "image" ? "default" : "outline"}
                size="sm"
                onClick={() => setPostType("image")}
                className="flex gap-2"
                disabled={isLoading}
              >
                <Image className="h-4 w-4" />
                Image
              </Button>
              <Button
                variant={postType === "link" ? "default" : "outline"}
                size="sm"
                onClick={() => setPostType("link")}
                className="flex gap-2"
                disabled={true}
              >
                <Link className="h-4 w-4" />
                Link
              </Button>
            </div>

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="community">Community</Label>
                <ModalSearchBar
                  defaultValue={formData.community}
                  onSelectCommunity={(name) => {
                    updateFormData("community", name);
                  }}
                  disabled={!!subredditName}
                />
              </div>
              {/* Create Post Tab Inputs */}
              <div className="space-y-2">
                <Label htmlFor="title">Title</Label>
                <Input
                  id="title"
                  placeholder="Title"
                  className="dark:bg-[#272729] dark:border-[#343536]"
                  value={formData.title}
                  onChange={(e) => updateFormData("title", e.target.value)}
                  disabled={isLoading}
                  maxLength={100}
                />
              </div>

              {postType === "text" && (
                <div className="space-y-2">
                  <Label htmlFor="content">Content</Label>
                  <Textarea
                    id="content"
                    placeholder="Text (optional)"
                    className="min-h-[150px] dark:bg-[#272729] dark:border-[#343536]"
                    value={formData.content}
                    onChange={(e) => updateFormData("content", e.target.value)}
                    disabled={isLoading}
                  />
                </div>
              )}

              {postType === "image" && (
                <div className="space-y-2">
                  <Label htmlFor="image">Image</Label>
                  <div
                    className="border-2 border-dashed rounded-md p-6 text-center dark:border-[#343536]"
                    onDragOver={handleDragOver}
                    onDragLeave={handleDragLeave}
                    onDrop={handleDrop}
                  >
                    {formData.imagePreview ? (
                      <div className="space-y-4">
                        <div className="relative mx-auto max-w-xs overflow-hidden rounded-md">
                          <img
                            src={formData.imagePreview}
                            alt="Preview"
                            className="max-h-64 max-w-full mx-auto object-contain"
                          />
                        </div>
                        <div className="flex justify-center gap-2">
                          <Button
                            variant="outline"
                            size="sm"
                            className="dark:bg-[#272729] dark:border-[#343536]"
                            onClick={handleFileInputClick}
                          >
                            Change Image
                          </Button>
                          <Button
                            variant="destructive"
                            size="sm"
                            onClick={handleRemoveImage}
                          >
                            Remove
                          </Button>
                        </div>
                      </div>
                    ) : (
                      <>
                        <ImageIcon className="h-8 w-8 mx-auto mb-2 text-muted-foreground" />
                        <p className="text-sm text-muted-foreground mb-2">
                          Drag and drop an image, or click to select
                        </p>
                        <Button
                          variant="outline"
                          size="sm"
                          className="dark:bg-[#272729] dark:border-[#343536]"
                          onClick={handleFileInputClick}
                        >
                          Upload Image
                        </Button>
                      </>
                    )}
                    <input
                      id="file-upload"
                      type="file"
                      accept="image/*"
                      className="hidden"
                      onChange={handleImageSelect}
                    />
                  </div>
                </div>
              )}

              {postType === "link" && (
                <div className="space-y-2">
                  <Label htmlFor="link">Link</Label>
                  <Input
                    id="link"
                    placeholder="URL"
                    type="url"
                    className="dark:bg-[#272729] dark:border-[#343536]"
                  />
                </div>
              )}
            </div>

            <DialogFooter>
              <Button
                disabled={isLoading}
                variant="outline"
                onClick={() => handleClose()}
                className="dark:bg-[#272729] dark:border-[#343536]"
              >
                Cancel
              </Button>
              <Button
                className="bg-purple-600 hover:bg-purple-700"
                onClick={handlePostSubmit}
                disabled={isLoading || !formData.title.trim()}
              >
                {isLoading ? "Creating..." : "Create"}
              </Button>
            </DialogFooter>
          </TabsContent>

          {/* Create Community Tab */}
          <TabsContent value="community" className="space-y-4 mt-4">
            <DialogHeader>
              {error && (
                <div className="p-3 rounded-md bg-red-500/10 border border-red-500 text-red-500">
                  <p className="text-sm font-medium">{error}</p>
                </div>
              )}
              <DialogTitle>Create a Community</DialogTitle>
              <DialogDescription>
                Start your own community on Apollo.
              </DialogDescription>
            </DialogHeader>

            <div className="space-y-4">
              <div className="space-y-2">
                <Label htmlFor="community-name">Community Name</Label>
                <div className="flex">
                  <span className="inline-flex items-center px-3 rounded-l-md border border-r-0 border-input bg-muted text-muted-foreground dark:bg-[#272729] dark:border-[#343536]">
                    r/
                  </span>
                  <Input
                    id="community-name"
                    placeholder="community_name"
                    className="rounded-l-none dark:bg-[#272729] dark:border-[#343536]"
                    value={formData.communityName}
                    maxLength={21}
                    onChange={(e) =>
                      updateFormData("communityName", e.target.value)
                    }
                    disabled={isLoading}
                  />
                </div>
                <p className="text-xs text-muted-foreground mt-1">
                  Community names including capitalization cannot be changed.
                </p>
              </div>

              <div className="space-y-2">
                <Label htmlFor="community-type">Community Type</Label>
                <Select disabled={true}>
                  <SelectTrigger
                    id="community-type"
                    className="dark:bg-[#272729] dark:border-[#343536]"
                  >
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent className="dark:bg-[#1a1a1a] dark:border-[#343536]">
                    <SelectItem value="public">
                      <div className="flex items-center">
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Public - Anyone can view, post, and comment
                      </div>
                    </SelectItem>
                    <SelectItem value="restricted">
                      <div className="flex items-center">
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Restricted - Anyone can view, but only approved users
                        can post
                      </div>
                    </SelectItem>
                    <SelectItem value="private">
                      <div className="flex items-center">
                        <MessageSquare className="h-4 w-4 mr-2" />
                        Private - Only approved users can view and post
                      </div>
                    </SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <div className="space-y-2">
                <Label htmlFor="community-description">
                  Description (Optional)
                </Label>
                <Textarea
                  id="community-description"
                  placeholder="Description"
                  className="dark:bg-[#272729] dark:border-[#343536]"
                  disabled={isLoading}
                  value={formData.communityDescription}
                  onChange={(e) =>
                    updateFormData("communityDescription", e.target.value)
                  }
                  maxLength={100}
                />
                <p className="text-xs text-muted-foreground mt-1">
                  This is how new members come to understand your community.
                </p>
              </div>
            </div>

            <DialogFooter>
              <Button
                variant="outline"
                onClick={() => handleClose()}
                className="dark:bg-[#272729] dark:border-[#343536]"
                disabled={isLoading}
              >
                Cancel
              </Button>
              <Button
                className="bg-purple-600 hover:bg-purple-700"
                disabled={isLoading}
                onClick={handleCommunitySubmit}
              >
                {isLoading ? "Creating..." : "Create"}
              </Button>
            </DialogFooter>
          </TabsContent>
        </Tabs>
      </DialogContent>
    </Dialog>
  );
}

================
File: src/components/Header.tsx
================
import { Link, useNavigate } from "react-router";
import { Menu, Plus, Search, User } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { ModeToggle } from "./mode-toggle";
import { useEffect, useState } from "react";
import { SignInButton, UserButton, useUser } from "@clerk/clerk-react";
import { Authenticated, Unauthenticated } from "convex/react";
import { CreateContentModal } from "./CreateContentModal";
import SearchBar from "./SearchBar";

export function Header() {
  const [mounted, setMounted] = useState(false);
  const [createModal, setCreateModal] = useState(false);

  // provides info about the user
  const { user } = useUser();

  const navigate = useNavigate();

  // Prevent hydration mismatch
  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  const openModal = () => {
    setCreateModal(true);
  };

  return (
    <header className="sticky top-0 z-50 w-full border-b bg-background">
      <div className="flex h-16 items-center px-4 md:px-6">
        <Button variant="ghost" size="icon" className="mr-2 md:hidden">
          <Menu className="h-6 w-6" />
          <span className="sr-only">Toggle menu</span>
        </Button>

        {/* Apollo Logo */}
        <Link to="/" className="flex items-center gap-2 mr-6">
          <div className="relative w-12 h-12 overflow-hidden">
            <img
              src="/public/apollo-transparent-logo.png"
              alt="Apollo"
              width={48}
              height={48}
              className="object-contain"
            />
          </div>
          <span className="hidden md:inline-block font-bold text-xl">
            apollo
          </span>
        </Link>

        <div className="hidden md:flex items-center gap-4 mr-4">
          <Button variant="ghost" size="sm" className="text-sm">
            Home
          </Button>
        </div>

        {/* Search Bar */}
        <SearchBar />

        {/* Action Buttons */}
        <div className="flex items-center gap-4">
          <ModeToggle />

          <Unauthenticated>
            <SignInButton mode="modal">
              <Button variant="ghost">Sign In</Button>
            </SignInButton>
          </Unauthenticated>
          <Authenticated>
            <Button
              variant="ghost"
              size="icon"
              className="hidden md:flex"
              onClick={() => openModal()}
            >
              <Plus className="h-5 w-5" />
              <span className="sr-only">Create</span>
            </Button>
            <Button
              variant="ghost"
              size="icon"
              className="hidden md:flex"
              onClick={() => user?.username && navigate(`/u/${user.username}`)}
            >
              <User className="h-5 w-5" />
              <span className="sr-only">My Account</span>
            </Button>
            <UserButton />

            {/* Create content modal */}
            {createModal && (
              <CreateContentModal
                defaultOpen={createModal}
                onOpenChange={setCreateModal}
              />
            )}
          </Authenticated>
        </div>
      </div>
    </header>
  );
}

================
File: src/components/Layout.tsx
================
import { Outlet } from "react-router";
import { Header } from "./Header";

const Layout = () => {
  return (
    <div className="app-container">
      <Header />
      <div className="main-content">
        <Outlet />
      </div>
    </div>
  );
};

export default Layout;

================
File: src/components/ModalSearchBar.tsx
================
import { useQuery } from "convex/react";
import { useEffect, useRef, useState } from "react";
import { api } from "../../convex/_generated/api";
import { Search, Users } from "lucide-react";
import { Input } from "./ui/input";

interface ModalSearchBarProps {
  onSelectCommunity: (communityName: string) => void;
  defaultValue?: string;
  disabled?: boolean;
}

const ModalSearchBar = ({
  onSelectCommunity,
  defaultValue = "",
  disabled = false,
}: ModalSearchBarProps) => {
  const [searchQuery, setSearchQuery] = useState(defaultValue);
  const [debouncedQuery, setDebouncedQuery] = useState("");
  const [isActive, setIsActive] = useState(false);
  const searchRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setSearchQuery(defaultValue);
  }, [defaultValue]);

  useEffect(() => {
    const timer = setTimeout(() => {
      setDebouncedQuery(searchQuery);
    }, 300);

    return () => clearTimeout(timer);
  }, [searchQuery]);

  // initiate search
  const results = useQuery(api.subreddit.search, { queryStr: debouncedQuery });

  // Handle clicks outside to close dropdown
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        searchRef.current &&
        !searchRef.current.contains(event.target as Node)
      ) {
        setIsActive(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleSelectCommunity = (name: string) => {
    onSelectCommunity(name);
    setIsActive(false);
    setSearchQuery(name);
  };

  return (
    <div className="w-full relative" ref={searchRef}>
      <div className="relative">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          type="search"
          placeholder="Search for a community"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          onFocus={() => setIsActive(true)}
          disabled={disabled}
          className="pl-9 py-2 h-9 dark:bg-[#272729] dark:border-[#343536] rounded-md text-sm focus-visible:ring-purple-500"
        />
      </div>

      {isActive && (
        <div className="absolute z-50 top-full left-0 mt-1 w-full bg-background border border-input rounded-md shadow-lg overflow-hidden dark:bg-[#1a1a1a] dark:border-[#343536]">
          {!searchQuery.trim() ? (
            <div className="p-4 text-center text-sm text-muted-foreground">
              <p>Search for communities</p>
            </div>
          ) : results && results.length > 0 ? (
            <ul className="max-h-60 overflow-y-auto">
              {results.map((result) => (
                <li
                  key={result._id}
                  className="px-4 py-2 hover:bg-accent cursor-pointer flex items-center gap-3 dark:hover:bg-[#272729]"
                  onClick={() => handleSelectCommunity(result.name)}
                >
                  <span className="flex-shrink-0">
                    <Users className="h-4 w-4 text-muted-foreground" />
                  </span>
                  <div className="flex flex-col">
                    <span className="text-sm font-medium text-foreground">
                      r/{result.name}
                    </span>
                    {result.description && (
                      <span className="text-xs text-muted-foreground truncate max-w-[280px]">
                        {result.description}
                      </span>
                    )}
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <div className="p-4 text-center text-sm text-muted-foreground">
              <p>No communities found for "{searchQuery}"</p>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default ModalSearchBar;

================
File: src/components/mode-toggle.tsx
================
import { Moon, Sun } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { useTheme } from "@/components/theme-provider";

export function ModeToggle() {
  const { theme, setTheme } = useTheme();

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="outline" size="icon">
          {theme === "dark" ? (
            <Moon className="h-[1.2rem] w-[1.2rem]" />
          ) : (
            <Sun className="h-[1.2rem] w-[1.2rem]" />
          )}
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme("light")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("dark")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme("system")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
}

================
File: src/components/PostCard.tsx
================
import { Link, useNavigate } from "react-router-dom";
import type { Id } from "convex/_generated/dataModel";
import { useUser } from "@clerk/clerk-react";
import { useState } from "react";
import {
  ArrowDown,
  ArrowUp,
  Bookmark,
  MessageSquare,
  Share2,
  Trash2,
} from "lucide-react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import Comment from "./Comment";
import { useMutation, useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";

interface Post {
  _id: Id<"post">;
  subject: string;
  body: string;
  _creationTime: number;
  authorId: string;
  imageUrl?: string;
  author?: {
    username: string;
  };
  subreddit?: {
    name: string;
  };
}

interface PostCardProps {
  post: Post;
  showSubreddit?: boolean;
  expandedView?: boolean;
}

interface PostHeaderProps {
  author?: { username: string };
  subreddit?: { name: string };
  showSubreddit: boolean;
  creationTime: number;
}

interface PostContentProps {
  subject: string;
  body?: string;
  image?: string;
  expandedView: boolean;
  postId: Id<"post">;
}

interface CommentSectionProps {
  postId: Id<"post">;
  comments: any[];
  onSubmit: (content: string) => void;
  signedIn: boolean;
}

interface VoteButtonProps {
  voteCount: { total: number; upvotes: number; downvotes: number } | undefined;
  hasUpvoted: boolean | undefined;
  hasDownvoted: boolean | undefined;
  onUpvote: () => void;
  onDownvote: () => void;
}

const VoteButtons = ({
  voteCount,
  hasUpvoted,
  hasDownvoted,
  onUpvote,
  onDownvote,
}: VoteButtonProps) => {
  return (
    <div className="flex flex-col items-center gap-1">
      <Button
        variant="ghost"
        size="icon"
        className={`h-6 w-6 ${hasUpvoted ? "text-purple-500" : "text-muted-foreground"}`}
        onClick={onUpvote}
      >
        <ArrowUp className="h-5 w-5" />
        <span className="sr-only">Upvote</span>
      </Button>
      <span className="text-sm font-medium">{voteCount?.total ?? 0}</span>
      <Button
        variant="ghost"
        size="icon"
        className={`h-6 w-6 ${hasDownvoted ? "text-red-500" : "text-muted-foreground"}`}
        onClick={onDownvote}
      >
        <ArrowDown className="h-5 w-5" />
        <span className="sr-only">Downvote</span>
      </Button>
    </div>
  );
};

const PostHeader = ({
  author,
  subreddit,
  showSubreddit,
  creationTime,
}: PostHeaderProps) => {
  return (
    <div className="flex items-center gap-2 mb-2">
      {showSubreddit && subreddit && (
        <>
          <Avatar className="h-5 w-5">
            <AvatarImage
              src="/placeholder.svg?height=20&width=20"
              alt={`r/${subreddit.name}`}
            />
            <AvatarFallback>
              {subreddit.name.charAt(0).toUpperCase()}
            </AvatarFallback>
          </Avatar>
          <Link
            to={`/r/${subreddit.name}`}
            className="text-xs font-medium hover:underline"
          >
            r/{subreddit.name}
          </Link>
        </>
      )}
      <span className="text-xs text-muted-foreground">
        Posted by{" "}
        {author ? (
          <Link to={`/u/${author.username}`} className="hover:underline">
            u/{author.username}
          </Link>
        ) : (
          <span>u/deleted</span>
        )}{" "}
        {new Date(creationTime).toLocaleString()}
      </span>
    </div>
  );
};

const PostContent = ({
  subject,
  body,
  image,
  expandedView,
  postId,
}: PostContentProps) => {
  const [isImageModalOpen, setIsImageModalOpen] = useState(false);

  return (
    <>
      {expandedView ? (
        <>
          <h2 className="text-lg font-semibold mb-2">{subject}</h2>
          {body && <p className="text-sm text-muted-foreground">{body}</p>}
          {image && (
            <div className="mt-2 rounded-md overflow-hidden bg-[#272729] border border-[#343536] relative">
              <img
                src={image || "/placeholder.svg"}
                alt="Post content"
                className="w-full h-auto object-contain max-h-[512px] cursor-pointer"
                onClick={() => setIsImageModalOpen(true)}
              />
            </div>
          )}
        </>
      ) : (
        <div className="flex flex-col">
          <Link to={`/post/${postId}`}>
            <h2 className="text-lg font-semibold mb-2 hover:underline">
              {subject}
            </h2>
          </Link>
          {body && (
            <p className="text-sm text-muted-foreground line-clamp-2">{body}</p>
          )}
          {image && (
            <div className="mt-2 rounded-md overflow-hidden bg-[#272729] border border-[#343536] relative">
              <div className="relative pt-[56.25%]">
                {" "}
                {/* 16:9 aspect ratio container */}
                <img
                  src={image || "/placeholder.svg"}
                  alt="Post content"
                  className="absolute inset-0 w-full h-full object-contain cursor-pointer"
                  onClick={(e) => {
                    e.preventDefault();
                    e.stopPropagation();
                    setIsImageModalOpen(true);
                  }}
                />
              </div>
            </div>
          )}
        </div>
      )}

      {/* Image Modal - shared between both views */}
      {isImageModalOpen && image && (
        <div
          className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4"
          onClick={() => setIsImageModalOpen(false)}
        >
          <div className="max-w-[90vw] max-h-[90vh] relative">
            <img
              src={image || "/placeholder.svg"}
              alt="Enlarged post content"
              className="max-w-full max-h-[90vh] object-contain"
            />
            <Button
              className="absolute top-2 right-2 bg-black/50 hover:bg-black/70 text-white rounded-full p-2"
              size="icon"
              onClick={(e) => {
                e.stopPropagation();
                setIsImageModalOpen(false);
              }}
            >
              <span className="sr-only">Close</span>✕
            </Button>
          </div>
        </div>
      )}
    </>
  );
};

const CommentSection = ({
  comments,
  onSubmit,
  signedIn,
}: CommentSectionProps) => {
  const [newComment, setNewComment] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (!newComment.trim()) return;
    onSubmit(newComment.trim());
    setNewComment("");
  };

  return (
    <div className="w-full space-y-4">
      {signedIn && (
        <Card className="w-full dark:bg-[#1a1a1a] dark:border-[#343536]">
          <CardContent className="p-4">
            <div className="flex items-center gap-2 mb-4">
              <Textarea
                placeholder="What are your thoughts?"
                className="flex-1 dark:bg-[#272729] dark:border-[#343536]"
                value={newComment}
                onChange={(e) => setNewComment(e.target.value)}
              />
            </div>
            <div className="flex justify-end">
              <Button
                className="bg-[#7950F2] hover:bg-[#6c45d9]"
                onClick={handleSubmit}
                disabled={!newComment.trim()}
              >
                Comment
              </Button>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Comments section */}
      <div className="w-full flex items-center gap-2 px-2">
        <MessageSquare className="h-5 w-5 text-muted-foreground" />
        <h3 className="font-medium">Comments</h3>
      </div>

      <Separator className="w-full dark:bg-[#343536]" />

      {comments.length === 0 ? (
        <Card className="w-full dark:bg-[#1a1a1a] dark:border-[#343536]">
          <CardContent className="p-4 text-center text-muted-foreground">
            No comments yet. Be the first to share your thoughts!
          </CardContent>
        </Card>
      ) : (
        <div className="comments-list w-full">
          {comments.map((comment) => (
            <Comment key={comment._id} comment={comment} />
          ))}
        </div>
      )}
    </div>
  );
};

const PostCard = ({
  post,
  showSubreddit = false,
  expandedView = false,
}: PostCardProps) => {
  const [showComments, setShowComments] = useState(expandedView);
  const [saved, setSaved] = useState(false);
  const navigate = useNavigate();
  const { user } = useUser();
  const ownedByCurrentUser = post.author?.username === user?.username;
  const createComment = useMutation(api.comments.create);
  const toggleUpvote = useMutation(api.vote.toggleUpvote);
  const toggleDownvote = useMutation(api.vote.toggleDownvote);

  const voteCount = useQuery(api.vote.getVoteCounts, { postId: post._id });
  const hasUpvoted = useQuery(api.vote.hasUpvoted, { postId: post._id });
  const hasDownvoted = useQuery(api.vote.hasDownvoted, { postId: post._id });

  const comments = useQuery(api.comments.get, { postId: post._id });
  const commentCount = useQuery(api.comments.getCommentCount, {
    postId: post._id,
  });

  const onUpvote = () => {
    toggleUpvote({ postId: post._id });
  };

  const onDownvote = () => {
    toggleDownvote({ postId: post._id });
  };

  const deletePost = useMutation(api.post.deletePost);

  const handleComment = () => {
    if (expandedView) {
      setShowComments(!showComments);
    } else {
      // Navigate to post page if not in expanded view
      navigate(`/post/${post._id}`);
    }
  };

  const handleDelete = async () => {
    deletePost({
      postId: post._id,
    });
  };

  const handleSubmitComment = (content: string) => {
    createComment({
      content,
      postId: post._id,
    });
  };

  return (
    <div className="space y-4 w-full">
      <Card className="w-full dark:bg-[#1a1a1a] dark:border-[#343536]">
        <CardHeader className="flex flex-row items-start gap-4 p-4">
          {/* Vote buttons column */}
          <VoteButtons
            voteCount={voteCount}
            hasUpvoted={hasUpvoted}
            hasDownvoted={hasDownvoted}
            onUpvote={user ? onUpvote : () => {}}
            onDownvote={user ? onDownvote : () => {}}
          />

          {/* Main content */}
          <div className="grid gap-1 w-full">
            <PostHeader
              author={post.author}
              subreddit={post.subreddit}
              showSubreddit={showSubreddit}
              creationTime={post._creationTime}
            />
            <PostContent
              subject={post.subject}
              body={post.body}
              image={post.imageUrl}
              expandedView={expandedView}
              postId={post._id}
            />
          </div>
        </CardHeader>

        <CardFooter className="border-t p-2 dark:border-[#343536]">
          <div className="flex items-center gap-4">
            <Button
              variant="ghost"
              size="sm"
              className="h-8 gap-1 text-muted-foreground"
              onClick={handleComment}
            >
              <MessageSquare className="h-4 w-4" />
              <span className="text-xs">{commentCount ?? 0} comments</span>
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className="h-8 gap-1 text-muted-foreground"
            >
              <Share2 className="h-4 w-4" />
              <span className="text-xs">Share</span>
            </Button>
            <Button
              variant="ghost"
              size="sm"
              className={`h-8 gap-1 ${
                saved ? "text-purple-500" : "text-muted-foreground"
              }`}
              onClick={() => setSaved(!saved)}
            >
              <Bookmark className="h-4 w-4" />
              <span className="text-xs">{saved ? "Saved" : "Save"}</span>
            </Button>

            {ownedByCurrentUser && (
              <Button
                variant="ghost"
                size="sm"
                className="h-8 gap-1 text-red-500"
                onClick={handleDelete}
              >
                <Trash2 className="h-4 w-4" />
                <span className="text-xs">Delete</span>
              </Button>
            )}
          </div>
        </CardFooter>
      </Card>

      {/* Comment sections - only show when in expanded view */}
      {(showComments || expandedView) && (
        <div className="mt-4 space-y-4">
          <CommentSection
            postId={post._id}
            comments={comments ?? []}
            onSubmit={handleSubmitComment}
            signedIn={!!user}
          />
        </div>
      )}
    </div>
  );
};

export default PostCard;

================
File: src/components/PostFeed.tsx
================
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import PostCard from "./PostCard";
import { Card, CardContent } from "@/components/ui/card";
import { Tabs, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Rocket, Flame, ArrowUpDown, Clock } from "lucide-react";

export function PostFeed() {
  const topPosts = useQuery(api.feed.getTopPosts, { limit: 10 });

  if (!topPosts) {
    return (
      <div className="w-full p-4">
        <Card className="w-full dark:bg-[#1a1a1a] dark:border-[#343536]">
          <CardContent className="p-6">
            <div className="flex items-center justify-center h-40">
              <div className="animate-pulse flex space-x-4">
                <div className="rounded-full bg-muted h-10 w-10"></div>
                <div className="flex-1 space-y-6 py-1">
                  <div className="h-2 bg-muted rounded"></div>
                  <div className="space-y-3">
                    <div className="grid grid-cols-3 gap-4">
                      <div className="h-2 bg-muted rounded col-span-2"></div>
                      <div className="h-2 bg-muted rounded col-span-1"></div>
                    </div>
                    <div className="h-2 bg-muted rounded"></div>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="w-full flex flex-col gap-4 p-4">
      <Card className="w-full dark:bg-[#1a1a1a] dark:border-[#343536]">
        <CardContent className="p-3">
          <Tabs defaultValue="hot" className="w-full">
            <TabsList className="w-full bg-background dark:bg-[#272729] justify-start border-b dark:border-[#343536] rounded-none p-0">
              <TabsTrigger
                value="hot"
                className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-[#7950F2] rounded-none px-4 py-2"
              >
                <Flame className="h-4 w-4 mr-2" />
                Hot
              </TabsTrigger>
              <TabsTrigger
                value="new"
                className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-[#7950F2] rounded-none px-4 py-2"
              >
                <Clock className="h-4 w-4 mr-2" />
                New
              </TabsTrigger>
              <TabsTrigger
                value="top"
                className="data-[state=active]:bg-transparent data-[state=active]:shadow-none data-[state=active]:border-b-2 data-[state=active]:border-[#7950F2] rounded-none px-4 py-2"
              >
                <Rocket className="h-4 w-4 mr-2" />
                Top
              </TabsTrigger>
            </TabsList>
          </Tabs>
        </CardContent>
      </Card>

      <div className="w-full space-y-4">
        {topPosts.map((post) => (
          <PostCard key={post._id} post={post} showSubreddit={true} />
        ))}
      </div>
    </div>
  );
}

================
File: src/components/SearchBar.tsx
================
import type React from "react";

import { useState } from "react";
import { useLocation, useNavigate } from "react-router";
import { Search, Users, FileText } from "lucide-react";
import { Input } from "./ui/input";
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";

interface SearchResult {
  _id: string;
  type: string;
  title: string;
  name: string;
}

const SearchBar = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const subredditMatch = location.pathname.match(/\/r\/([^/]+)/);
  const currentSubreddit = subredditMatch ? subredditMatch[1] : null;

  const [searchQuery, setSearchQuery] = useState("");
  const [isActive, setIsActive] = useState(false);
  let results: SearchResult[] = [];

  // perform search query
  if (!currentSubreddit) {
    results = useQuery(api.subreddit.search, {
      queryStr: searchQuery,
    }) as SearchResult[];
  } else {
    results = useQuery(api.post.search, {
      queryStr: searchQuery,
      subreddit: currentSubreddit,
    }) as SearchResult[];
  }

  const handleFocus = () => {
    setIsActive(true);
  };

  const handleBlur = () => {
    setTimeout(() => setIsActive(false), 200);
  };

  const handleSearch = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const handleResult = (result: SearchResult) => {
    if (result.type === "post") {
      navigate(`/post/${result._id}`);
    } else {
      navigate(`/r/${result.name}`);
    }
    setIsActive(false);
    setSearchQuery("");
  };

  const getIconForType = (type: string) => {
    switch (type) {
      case "community":
        return <Users className="h-4 w-4 text-muted-foreground" />;
      case "post":
        return <FileText className="h-4 w-4 text-muted-foreground" />;
      default:
        return <FileText className="h-4 w-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="flex-1 flex items-center justify-center px-4">
      <div className="w-full max-w-sm md:max-w-md relative">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder={
              currentSubreddit
                ? `Search r/${currentSubreddit}`
                : "Search Apollo"
            }
            value={searchQuery}
            onChange={handleSearch}
            onFocus={handleFocus}
            onBlur={handleBlur}
            className="pl-9 py-2 h-9 bg-[#272729] dark:bg-[#272729] border-[#343536] rounded-full text-sm focus-visible:ring-purple-500 focus-visible:ring-offset-0 focus-visible:border-transparent"
          />
          {currentSubreddit && (
            <div className="absolute right-3 top-1/2 -translate-y-1/2 bg-[#7950F2] text-white text-xs px-2 py-0.5 rounded-full">
              <span>r/{currentSubreddit}</span>
            </div>
          )}
        </div>
        {isActive && (
          <div className="absolute z-50 top-full left-0 mt-1 w-full bg-[#1a1a1a] border border-[#343536] rounded-md shadow-lg overflow-hidden">
            {searchQuery === "" ? (
              currentSubreddit ? (
                <div className="p-4 text-center text-sm text-muted-foreground">
                  <p>Search for posts in r/{currentSubreddit}</p>
                </div>
              ) : (
                <div className="p-4 text-center text-sm text-muted-foreground">
                  <p>Try searching for posts or communities</p>
                </div>
              )
            ) : results && results.length > 0 ? (
              <ul className="max-h-80 overflow-y-auto">
                {results.map((result) => (
                  <li
                    key={result._id}
                    className="px-4 py-2 hover:bg-[#272729] cursor-pointer flex items-center gap-3"
                    onClick={() => handleResult(result)}
                  >
                    <span className="flex-shrink-0">
                      {getIconForType(result.type)}
                    </span>
                    <div className="flex flex-col">
                      <span className="text-sm font-medium text-foreground">
                        {result.title}
                      </span>
                      <span className="text-xs text-muted-foreground">
                        {result.type === "community" ? "Community" : "Post"}
                      </span>
                    </div>
                  </li>
                ))}
              </ul>
            ) : (
              <div className="p-4 text-center text-sm text-muted-foreground">
                <p>No results found for "{searchQuery}"</p>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};

export default SearchBar;

================
File: src/components/Sidebar.tsx
================
import { Link } from "react-router";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { ChevronUp, Home, Rocket, TrendingUp } from "lucide-react";
import { api } from "../../convex/_generated/api";
import { useQuery } from "convex/react";

export function Sidebar() {
  const topSubreddits = useQuery(api.feed.topSubreddits, { limit: 5 });

  return (
    <div className="space-y-4">
      <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
        <CardHeader className="pb-2">
          <div className="flex items-center gap-2">
            <div className="relative w-6 h-6"></div>
            <CardTitle>Home</CardTitle>
          </div>
        </CardHeader>
        <CardContent className="grid gap-1">
          <Button variant="ghost" className="justify-start" asChild>
            <Link to="/" className="flex items-center">
              <Home className="mr-2 h-4 w-4" />
              Home
            </Link>
          </Button>
          <Button variant="ghost" className="justify-start" asChild>
            <Link to="/" className="flex items-center">
              <TrendingUp className="mr-2 h-4 w-4" />
              Popular
            </Link>
          </Button>
          <Button variant="ghost" className="justify-start" asChild>
            <Link to="/" className="flex items-center">
              <Rocket className="mr-2 h-4 w-4" />
              All
            </Link>
          </Button>
        </CardContent>
      </Card>

      {/* Small banner */}
      <Card className="overflow-hidden dark:bg-[#1a1a1a] dark:border-[#343536]">
        <div className="relative h-16 w-full">
          <img
            src="/public/reddithomebanner.png"
            alt="Space theme"
            className="absolute inset-0 w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-r from-black/30 to-transparent flex items-center p-3">
            <span className="text-white text-sm font-medium drop-shadow-md">
              Explore the Universe
            </span>
          </div>
        </div>
      </Card>

      <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
        <CardHeader className="pb-2">
          <CardTitle>Top Communities</CardTitle>
        </CardHeader>
        <CardContent className="grid gap-2">
          {topSubreddits?.length === 0 ? (
            <p className="text-sm text-muted-foreground">No communities yet</p>
          ) : (
            topSubreddits?.map((subreddit, index) => (
              <div className="flex items-center gap-2" key={subreddit._id}>
                <div className="text-muted-foreground text-sm">{index + 1}</div>
                <ChevronUp className="h-4 w-4 text-purple-500" />
                <Avatar className="h-6 w-6">
                  <AvatarImage src="/placeholder.svg?height=24&width=24" />
                  <AvatarFallback>
                    {subreddit.name.charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
                <Link
                  to={`r/${subreddit.name}`}
                  className="text-sm font-medium hover:underline"
                >
                  r/{subreddit.name}
                </Link>
              </div>
            ))
          )}
        </CardContent>
        <CardFooter>
          <Button className="w-full" variant="outline">
            View All
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

================
File: src/components/theme-provider.tsx
================
import { createContext, useContext, useEffect, useState } from "react";

type Theme = "dark" | "light" | "system";

type ThemeProviderProps = {
  children: React.ReactNode;
  defaultTheme?: Theme;
  storageKey?: string;
};

type ThemeProviderState = {
  theme: Theme;
  setTheme: (theme: Theme) => void;
};

const initialState: ThemeProviderState = {
  theme: "system",
  setTheme: () => null,
};

const ThemeProviderContext = createContext<ThemeProviderState>(initialState);

export function ThemeProvider({
  children,
  defaultTheme = "system",
  storageKey = "vite-ui-theme",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  );

  useEffect(() => {
    const root = window.document.documentElement;

    root.classList.remove("light", "dark");

    if (theme === "system") {
      const systemTheme = window.matchMedia("(prefers-color-scheme: dark)")
        .matches
        ? "dark"
        : "light";

      root.classList.add(systemTheme);
    } else {
      root.classList.add(theme);
    }
  }, [theme]);

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme);
      setTheme(theme);
    },
  };

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  );
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext);

  if (context === undefined)
    throw new Error("useTheme must be used within a ThemeProvider");

  return context;
};

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: src/pages/HomePage.tsx
================
import { Banner } from "@/components/Banner";
import { PostFeed } from "@/components/PostFeed";
import { Sidebar } from "@/components/Sidebar";

const HomePage = () => {
  return (
    <div className="min-h-screen bg-background text-foreground">
      <main className="container mx-auto px-4 py-6 flex gap-6">
        <div className="flex-1">
          <Banner />
          <PostFeed />
        </div>
        <div className="hidden lg:block w-80">
          <Sidebar />
        </div>
      </main>
    </div>
  );
};

export default HomePage;

================
File: src/pages/PostPage.tsx
================
import { useParams, useNavigate } from "react-router";
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import PostCard from "@/components/PostCard";
import { ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";

const PostPage = () => {
  const { postId } = useParams();
  const navigate = useNavigate();
  const post = useQuery(api.post.getPost, { id: postId });

  if (!post) {
    return (
      <div className="min-h-screen bg-background dark:bg-[#121212] py-6">
        <div className="container max-w-2xl mx-auto px-4">
          <div className="flex flex-col items-center justify-center h-40">
            <div className="w-8 h-8 border-4 border-t-[#7950F2] border-r-transparent border-b-transparent border-l-transparent rounded-full animate-spin mb-4"></div>
            <p className="text-muted-foreground">Loading post...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background dark:bg-[#121212] py-6">
      <div className="container max-w-2xl mx-auto px-4">
        <div className="mb-4 flex items-center">
          <Button
            variant="ghost"
            size="sm"
            className="flex items-center text-muted-foreground hover:text-foreground"
            onClick={() => navigate(-1)}
          >
            <ArrowLeft className="h-4 w-4 mr-1" />
            <span>Back</span>
          </Button>
        </div>

        <PostCard post={post} showSubreddit={true} expandedView={true} />
      </div>
    </div>
  );
};

export default PostPage;

================
File: src/pages/ProfilePage.tsx
================
import { useParams } from "react-router";
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import PostCard from "@/components/PostCard";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { CalendarDays, Share2 } from "lucide-react";

const ProfilePage = () => {
  const { username } = useParams();
  const posts = useQuery(api.post.getUserPosts, {
    authorUsername: username || "",
  });
  const stats = useQuery(api.users.getPublicUser, {
    username: username || "",
  });

  // Format date for display - using a placeholder date since we don't have actual user data
  const formatDate = (timestamp: number | undefined) => {
    if (!timestamp) return "Unknown Date";
    const date = new Date(timestamp);
    return date.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    });
  };

  const joinDate = formatDate(stats?.joinDate);

  if (posts === undefined)
    return (
      <div className="container mx-auto py-6 px-4 md:px-6">
        <Card className="overflow-hidden dark:bg-[#1a1a1a] dark:border-[#343536]">
          <div className="h-32 bg-gradient-to-r from-purple-600 to-purple-400"></div>
          <CardHeader className="pb-2 relative">
            <div className="absolute -top-16 left-6 border-4 border-background dark:border-[#1a1a1a] rounded-full">
              <Avatar className="h-24 w-24">
                <AvatarFallback className="text-2xl">
                  {username?.charAt(0).toUpperCase()}
                </AvatarFallback>
              </Avatar>
            </div>
            <div className="mt-24 pt-2">
              <h1 className="text-2xl font-bold">u/{username}</h1>
            </div>
          </CardHeader>
        </Card>
        <div className="flex justify-center items-center h-40">
          <div className="animate-pulse text-muted-foreground">Loading...</div>
        </div>
      </div>
    );

  return (
    <div className="container mx-auto py-6 px-4 md:px-6">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        {/* Main content area */}
        <div className="md:col-span-2 space-y-6">
          {/* User banner and info */}
          <Card className="overflow-hidden dark:bg-[#1a1a1a] dark:border-[#343536]">
            {/* Banner */}
            <div className="h-32 bg-gradient-to-r from-purple-600 to-purple-400 relative"></div>

            {/* User info */}
            <CardHeader className="pb-2 relative">
              <div className="absolute -top-16 left-6 border-4 border-background dark:border-[#1a1a1a] rounded-full">
                <Avatar className="h-24 w-24">
                  <AvatarImage
                    src="/placeholder.svg?height=96&width=96"
                    alt={username}
                  />
                  <AvatarFallback className="text-2xl">
                    {username?.charAt(0).toUpperCase()}
                  </AvatarFallback>
                </Avatar>
              </div>

              <div className="mt-24 pt-2 flex justify-between items-start">
                <div>
                  <h1 className="text-2xl font-bold">u/{username}</h1>
                  <p className="text-muted-foreground">
                    Posts: {stats?.posts ?? 0}
                  </p>
                </div>

                <div className="flex gap-2">
                  <Button variant="outline" size="icon">
                    <Share2 className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </CardHeader>
          </Card>

          {/* Posts/Comments tabs */}
          <Tabs defaultValue="posts" className="w-full">
            <TabsList className="w-full bg-muted dark:bg-[#272729]">
              <TabsTrigger value="posts" className="flex-1">
                Posts
              </TabsTrigger>
              <TabsTrigger value="comments" className="flex-1">
                Comments
              </TabsTrigger>
              <TabsTrigger value="upvoted" className="flex-1">
                Upvoted
              </TabsTrigger>
              <TabsTrigger value="saved" className="flex-1">
                Saved
              </TabsTrigger>
            </TabsList>

            <TabsContent value="posts" className="mt-4 space-y-4">
              {posts.length === 0 ? (
                <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
                  <CardContent className="p-6 text-center">
                    <p className="text-muted-foreground">No posts yet</p>
                  </CardContent>
                </Card>
              ) : (
                posts.map((post) => (
                  <div key={post._id} className="mb-4">
                    <PostCard post={post} showSubreddit={true} />
                  </div>
                ))
              )}
            </TabsContent>

            <TabsContent value="comments" className="mt-4">
              <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
                <CardContent className="p-6 text-center">
                  <p className="text-muted-foreground">No comments yet</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="upvoted" className="mt-4">
              <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
                <CardContent className="p-6 text-center">
                  <p className="text-muted-foreground">No upvoted posts</p>
                </CardContent>
              </Card>
            </TabsContent>

            <TabsContent value="saved" className="mt-4">
              <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
                <CardContent className="p-6 text-center">
                  <p className="text-muted-foreground">No saved posts</p>
                </CardContent>
              </Card>
            </TabsContent>
          </Tabs>
        </div>

        {/* Sidebar */}
        <div className="space-y-6">
          {/* User stats card */}
          <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
            <CardHeader>
              <h2 className="text-lg font-semibold">About u/{username}</h2>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="flex items-center gap-2">
                <CalendarDays className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">Apollo member since {joinDate}</span>
              </div>

              <div className="pt-2 border-t dark:border-[#343536]">
                <div className="flex justify-between py-2">
                  <span className="text-sm text-muted-foreground">Posts</span>
                  <span className="text-sm font-medium">
                    {stats?.posts ?? 0}
                  </span>
                </div>
                <div className="flex justify-between py-2">
                  <span className="text-sm text-muted-foreground">
                    Cake Day
                  </span>
                  <span className="text-sm font-medium">{joinDate}</span>
                </div>
              </div>
            </CardContent>
          </Card>

          {/* Trophies card */}
          <Card className="dark:bg-[#1a1a1a] dark:border-[#343536]">
            <CardHeader>
              <h2 className="text-lg font-semibold">Trophies</h2>
            </CardHeader>
            <CardContent>
              <div className="flex items-center gap-3 py-2">
                <div className="h-10 w-10 rounded-full bg-yellow-500/20 flex items-center justify-center">
                  <span className="text-yellow-500 text-lg">🏆</span>
                </div>
                <div>
                  <p className="text-sm font-medium">Verified Email</p>
                  <p className="text-xs text-muted-foreground">
                    Has a verified email address
                  </p>
                </div>
              </div>

              <div className="flex items-center gap-3 py-2">
                <div className="h-10 w-10 rounded-full bg-purple-500/20 flex items-center justify-center">
                  <span className="text-purple-500 text-lg">⭐</span>
                </div>
                <div>
                  <p className="text-sm font-medium">Apollo Member</p>
                  <p className="text-xs text-muted-foreground">
                    Active community member
                  </p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage;

================
File: src/pages/SubredditPage.tsx
================
import { useParams } from "react-router";
import { useQuery } from "convex/react";
import { api } from "../../convex/_generated/api";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Bell } from "lucide-react";
import PostCard from "@/components/PostCard";

// subreddit variable should contain:
// name
// description

const SubredditPage = () => {
  const { subredditName } = useParams();

  const subreddit = useQuery(api.subreddit.get, { name: subredditName || "" });

  if (subreddit === undefined) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-pulse flex flex-col items-center">
          <div className="h-8 w-64 bg-muted rounded mb-4"></div>
          <div className="h-4 w-48 bg-muted rounded"></div>
        </div>
      </div>
    );
  }

  if (!subreddit) {
    return (
      <div className="flex flex-col items-center justify-center min-h-screen">
        <h1 className="text-2xl font-bold mb-2">Subreddit Not Found</h1>
        <p className="text-muted-foreground mb-4">
          The subreddit you're looking for doesn't exist.
        </p>
        <Button>Return Home</Button>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-background">
      {/* Subreddit Banner */}
      <div className="h-32 bg-primary/20 relative">
        <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-background to-transparent h-16"></div>
      </div>

      {/* Subreddit Info */}
      <div className="container mx-auto px-4">
        <div className="flex flex-col md:flex-row gap-6 -mt-6 relative">
          {/* Main Content */}
          <div className="flex-1 pb-8">
            <div className="bg-card rounded-t-lg shadow-sm p-4 mb-4">
              <div className="flex items-start gap-4">
                <div className="w-16 h-16 rounded-full bg-primary flex items-center justify-center text-primary-foreground font-bold text-2xl">
                  {subreddit.name.charAt(0).toUpperCase()}
                </div>
                <div className="flex-1">
                  <h1 className="text-2xl font-bold">r/{subreddit.name}</h1>
                  <p className="text-muted-foreground text-sm">
                    r/{subreddit.name}
                  </p>
                </div>
                <div className="flex gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    className="flex items-center gap-1"
                    disabled={true}
                  >
                    <Bell className="h-4 w-4" />
                    Join
                  </Button>
                </div>
              </div>
              <p className="mt-4 text-sm">{subreddit.description}</p>
            </div>

            {/* Posts */}
            <div className="space-y-4 w-full">
              {subreddit.posts?.length === 0 ? (
                <div>
                  <p>No posts yet. Be the first to post!</p>
                </div>
              ) : (
                subreddit.posts?.map((post) => (
                  <PostCard key={post._id} post={post} />
                ))
              )}
            </div>
          </div>

          {/* Sidebar */}
          <div className="md:w-80 space-y-4">
            <Card>
              <CardHeader className="bg-primary text-primary-foreground">
                <CardTitle>About Community</CardTitle>
              </CardHeader>
              <CardContent className="p-4">
                <p className="text-sm mb-4">{subreddit.description}</p>
                <div className="flex items-center gap-2 text-sm mb-4">
                  <div>
                    <div className="font-bold"></div>
                    <div className="text-xs text-muted-foreground">Members</div>
                  </div>
                  <div className="h-8 w-px bg-border"></div>
                  <div>
                    <div className="font-bold"></div>
                    <div className="text-xs text-muted-foreground">Online</div>
                  </div>
                </div>
                <div className="text-xs text-muted-foreground">
                  Created{" "}
                  {new Date(subreddit._creationTime).toLocaleDateString()}
                </div>
              </CardContent>
              <CardFooter className="p-4 pt-0"></CardFooter>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle>Community Rules</CardTitle>
              </CardHeader>
              <CardContent className="p-4 pt-0">
                <ol className="list-decimal list-inside space-y-2 text-sm">
                  <li>Be respectful to others</li>
                  <li>No spam or self-promotion</li>
                  <li>Use appropriate post flairs</li>
                  <li>Follow Apollo's content policy</li>
                </ol>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SubredditPage;

================
File: src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

function Avatar({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Root>) {
  return (
    <AvatarPrimitive.Root
      data-slot="avatar"
      className={cn(
        "relative flex size-8 shrink-0 overflow-hidden rounded-full",
        className
      )}
      {...props}
    />
  )
}

function AvatarImage({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Image>) {
  return (
    <AvatarPrimitive.Image
      data-slot="avatar-image"
      className={cn("aspect-square size-full", className)}
      {...props}
    />
  )
}

function AvatarFallback({
  className,
  ...props
}: React.ComponentProps<typeof AvatarPrimitive.Fallback>) {
  return (
    <AvatarPrimitive.Fallback
      data-slot="avatar-fallback"
      className={cn(
        "bg-muted flex size-full items-center justify-center rounded-full",
        className
      )}
      {...props}
    />
  )
}

export { Avatar, AvatarImage, AvatarFallback }

================
File: src/components/ui/button.tsx
================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow-xs hover:!bg-primary/90",
        destructive:
          "bg-destructive text-white shadow-xs hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60",
        outline:
          "border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:!bg-input/50",
        secondary:
          "bg-secondary text-secondary-foreground shadow-xs hover:bg-secondary/80",
        ghost:
          "hover:bg-accent hover:text-accent-foreground dark:hover:!bg-accent/50",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2 has-[>svg]:px-3",
        sm: "h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5",
        lg: "h-10 rounded-md px-6 has-[>svg]:px-4",
        icon: "size-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
);

function Button({
  className,
  variant,
  size,
  asChild = false,
  ...props
}: React.ComponentProps<"button"> &
  VariantProps<typeof buttonVariants> & {
    asChild?: boolean;
  }) {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      data-slot="button"
      className={cn(buttonVariants({ variant, size, className }))}
      {...props}
    />
  );
}

export { Button, buttonVariants };

================
File: src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { CheckIcon, ChevronRightIcon, CircleIcon } from "lucide-react"

import { cn } from "@/lib/utils"

function DropdownMenu({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {
  return <DropdownMenuPrimitive.Root data-slot="dropdown-menu" {...props} />
}

function DropdownMenuPortal({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {
  return (
    <DropdownMenuPrimitive.Portal data-slot="dropdown-menu-portal" {...props} />
  )
}

function DropdownMenuTrigger({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {
  return (
    <DropdownMenuPrimitive.Trigger
      data-slot="dropdown-menu-trigger"
      {...props}
    />
  )
}

function DropdownMenuContent({
  className,
  sideOffset = 4,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {
  return (
    <DropdownMenuPrimitive.Portal>
      <DropdownMenuPrimitive.Content
        data-slot="dropdown-menu-content"
        sideOffset={sideOffset}
        className={cn(
          "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto rounded-md border p-1 shadow-md",
          className
        )}
        {...props}
      />
    </DropdownMenuPrimitive.Portal>
  )
}

function DropdownMenuGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {
  return (
    <DropdownMenuPrimitive.Group data-slot="dropdown-menu-group" {...props} />
  )
}

function DropdownMenuItem({
  className,
  inset,
  variant = "default",
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {
  inset?: boolean
  variant?: "default" | "destructive"
}) {
  return (
    <DropdownMenuPrimitive.Item
      data-slot="dropdown-menu-item"
      data-inset={inset}
      data-variant={variant}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 dark:data-[variant=destructive]:focus:bg-destructive/20 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuCheckboxItem({
  className,
  children,
  checked,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {
  return (
    <DropdownMenuPrimitive.CheckboxItem
      data-slot="dropdown-menu-checkbox-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      checked={checked}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CheckIcon className="size-4" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.CheckboxItem>
  )
}

function DropdownMenuRadioGroup({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {
  return (
    <DropdownMenuPrimitive.RadioGroup
      data-slot="dropdown-menu-radio-group"
      {...props}
    />
  )
}

function DropdownMenuRadioItem({
  className,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {
  return (
    <DropdownMenuPrimitive.RadioItem
      data-slot="dropdown-menu-radio-item"
      className={cn(
        "focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4",
        className
      )}
      {...props}
    >
      <span className="pointer-events-none absolute left-2 flex size-3.5 items-center justify-center">
        <DropdownMenuPrimitive.ItemIndicator>
          <CircleIcon className="size-2 fill-current" />
        </DropdownMenuPrimitive.ItemIndicator>
      </span>
      {children}
    </DropdownMenuPrimitive.RadioItem>
  )
}

function DropdownMenuLabel({
  className,
  inset,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.Label
      data-slot="dropdown-menu-label"
      data-inset={inset}
      className={cn(
        "px-2 py-1.5 text-sm font-medium data-[inset]:pl-8",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSeparator({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {
  return (
    <DropdownMenuPrimitive.Separator
      data-slot="dropdown-menu-separator"
      className={cn("bg-border -mx-1 my-1 h-px", className)}
      {...props}
    />
  )
}

function DropdownMenuShortcut({
  className,
  ...props
}: React.ComponentProps<"span">) {
  return (
    <span
      data-slot="dropdown-menu-shortcut"
      className={cn(
        "text-muted-foreground ml-auto text-xs tracking-widest",
        className
      )}
      {...props}
    />
  )
}

function DropdownMenuSub({
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {
  return <DropdownMenuPrimitive.Sub data-slot="dropdown-menu-sub" {...props} />
}

function DropdownMenuSubTrigger({
  className,
  inset,
  children,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {
  inset?: boolean
}) {
  return (
    <DropdownMenuPrimitive.SubTrigger
      data-slot="dropdown-menu-sub-trigger"
      data-inset={inset}
      className={cn(
        "focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8",
        className
      )}
      {...props}
    >
      {children}
      <ChevronRightIcon className="ml-auto size-4" />
    </DropdownMenuPrimitive.SubTrigger>
  )
}

function DropdownMenuSubContent({
  className,
  ...props
}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {
  return (
    <DropdownMenuPrimitive.SubContent
      data-slot="dropdown-menu-sub-content"
      className={cn(
        "bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden rounded-md border p-1 shadow-lg",
        className
      )}
      {...props}
    />
  )
}

export {
  DropdownMenu,
  DropdownMenuPortal,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuLabel,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioGroup,
  DropdownMenuRadioItem,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuSub,
  DropdownMenuSubTrigger,
  DropdownMenuSubContent,
}

================
File: src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

function Input({ className, type, ...props }: React.ComponentProps<"input">) {
  return (
    <input
      type={type}
      data-slot="input"
      className={cn(
        "file:text-foreground placeholder:text-muted-foreground selection:bg-primary selection:text-primary-foreground dark:bg-input/30 border-input flex h-9 w-full min-w-0 rounded-md border bg-transparent px-3 py-1 text-base shadow-xs transition-[color,box-shadow] outline-none file:inline-flex file:h-7 file:border-0 file:bg-transparent file:text-sm file:font-medium disabled:pointer-events-none disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        "focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px]",
        "aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive",
        className
      )}
      {...props}
    />
  )
}

export { Input }

================
File: src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Textarea = React.forwardRef<
  HTMLTextAreaElement,
  React.ComponentProps<"textarea">
>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
        className
      )}
      ref={ref}
      {...props}
    />
  )
})
Textarea.displayName = "Textarea"

export { Textarea }
